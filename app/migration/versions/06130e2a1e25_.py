"""empty message

Revision ID: 06130e2a1e25
Revises: 
Create Date: 2025-08-03 20:37:16.414957

"""
from typing import Sequence, Union
import geoalchemy2

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '06130e2a1e25'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    op.execute("CREATE EXTENSION IF NOT EXISTS postgis")

    op.create_table('builders',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('geolocations', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_table('organizations',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('builders_id', sa.Integer(), nullable=True),
        sa.Column('name', sa.String(), nullable=True),
        sa.Column('geolocations', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326), nullable=False),
        sa.Column('type_org', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['builders_id'], ['builders.id']),
        sa.PrimaryKeyConstraint('id')
    )

    # Создание индексов через exec (чтобы избежать DuplicateTableError)
    op.execute("""
    DO $$ BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_class WHERE relname = 'idx_builders_geolocations') THEN
            CREATE INDEX idx_builders_geolocations ON builders USING gist (geolocations);
        END IF;
    END $$;
    """)

    op.execute("""
    DO $$ BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_class WHERE relname = 'idx_organizations_geolocations') THEN
            CREATE INDEX idx_organizations_geolocations ON organizations USING gist (geolocations);
        END IF;
    END $$;
    """)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('spatial_ref_sys',
    # sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.CheckConstraint('srid > 0 AND srid <= 998999', name=op.f('spatial_ref_sys_srid_check')),
    # sa.PrimaryKeyConstraint('srid', name=op.f('spatial_ref_sys_pkey'))
    # )
    op.drop_index('idx_organizations_geolocations', table_name='organizations', postgresql_using='gist')
    op.drop_table('organizations')
    op.drop_index('idx_builders_geolocations', table_name='builders', postgresql_using='gist')
    op.drop_table('builders')
    # ### end Alembic commands ###
